{"version":3,"sources":["Handler.js"],"names":["define","types","objects","arrays","klass","events","Event","Array","prototype","slice","compact","isString","isDefined","isPlainObject","isFunction","isEmptyObject","Handler","mixin","safeMixin","listenTo","obj","event","callback","one","this","on","listening","listeningTo","_listeningTo","i","length","push","listeningEvents","listeningEvent","indexOf","listenToOnce","unlistenTo","eventName","j","off"],"mappings":";;;;;;;AAAAA,QACE,sBACA,wBACA,uBACA,sBACA,WACA,WACA,SAASC,EAAMC,EAAQC,EAAOC,EAAMC,EAAOC,GAC7BC,MAAMC,UAAUC,MAA5B,IACIC,EAAUP,EAAOO,QAIjBC,GAHYV,EAAMW,UACFX,EAAMY,cACTZ,EAAMa,WACRb,EAAMU,UACjBI,EAAgBd,EAAMc,cAKtBC,GAJQd,EAAQe,MACJf,EAAQgB,UAGVd,GAEVe,SAAU,SAASC,EAAKC,EAAOC,EAA8BC,GACzD,IAAKH,EACD,OAAOI,KAIPb,EAASW,KACTA,EAAWE,KAAKF,IAGhBC,EACAH,EAAIG,IAAIF,EAAOC,EAAUE,MAEzBJ,EAAIK,GAAGJ,EAAOC,EAAUE,MAO5B,IAHA,IACIE,EADAC,EAAcH,KAAKI,eAAiBJ,KAAKI,iBAGpCC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IACpC,GAAIF,EAAYE,GAAGT,KAAOA,EAAK,CAC3BM,EAAYC,EAAYE,GACxB,MAGHH,GACDC,EAAYI,KACRL,GACIN,IAAKA,EACLf,YAIZ,IAAI2B,EAAkBN,EAAUrB,OAC5B4B,EAAiBD,EAAgBX,GAASW,EAAgBX,OAK9D,OAJyC,GAArCY,EAAeC,QAAQZ,IACvBW,EAAeF,KAAKT,GAGjBE,MAGXW,aAAc,SAASf,EAAKC,EAAOC,GAC/B,OAAOE,KAAKL,SAASC,EAAKC,EAAOC,EAAU,IAG/Cc,WAAY,SAAShB,EAAKC,EAAOC,GAC7B,IAAIK,EAAcH,KAAKI,aACvB,IAAKD,EACD,OAAOH,KAEX,IAAK,IAAIK,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IAAK,CACzC,IAAIH,EAAYC,EAAYE,GAE5B,IAAIT,GAAOA,GAAOM,EAAUN,IAA5B,CAIA,IAAIY,EAAkBN,EAAUrB,OAChC,IAAK,IAAIgC,KAAaL,EAClB,IAAIX,GAASA,GAASgB,EAAtB,CAMA,IAFA,IAAIJ,EAAiBD,EAAgBK,GAE5BC,EAAI,EAAGA,EAAIL,EAAeH,OAAQQ,IAClChB,GAAYA,GAAYW,EAAeJ,KACxCH,EAAUN,IAAImB,IAAIF,EAAWJ,EAAeJ,GAAIL,MAChDS,EAAeJ,GAAK,MAI5BI,EAAiBD,EAAgBK,GAAa3B,EAAQuB,GAElDlB,EAAckB,KACdD,EAAgBK,GAAa,MAKjCtB,EAAciB,KACdL,EAAYE,GAAK,OASzB,OALAF,EAAcH,KAAKI,aAAelB,EAAQiB,GACtCZ,EAAcY,KACdH,KAAKI,aAAe,MAGjBJ,SAIf,OAAOnB,EAAOW,QAAUA","file":"../Handler.js","sourcesContent":["define([\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-arrays\",\r\n  \"skylark-langx-klass\",\r\n  \"./events\",\r\n  \"./Event\"\r\n],function(types,objects,arrays,klass,events,Event){\r\n    var slice = Array.prototype.slice,\r\n        compact = arrays.compact,\r\n        isDefined = types.isDefined,\r\n        isPlainObject = types.isPlainObject,\r\n        isFunction = types.isFunction,\r\n        isString = types.isString,\r\n        isEmptyObject = types.isEmptyObject,\r\n        mixin = objects.mixin,\r\n        safeMixin = objects.safeMixin;\r\n\r\n\r\n    var Handler = klass({\r\n\r\n        listenTo: function(obj, event, callback, /*used internally*/ one) {\r\n            if (!obj) {\r\n                return this;\r\n            }\r\n\r\n            // Bind callbacks on obj,\r\n            if (isString(callback)) {\r\n                callback = this[callback];\r\n            }\r\n\r\n            if (one) {\r\n                obj.one(event, callback, this);\r\n            } else {\r\n                obj.on(event, callback, this);\r\n            }\r\n\r\n            //keep track of them on listening.\r\n            var listeningTo = this._listeningTo || (this._listeningTo = []),\r\n                listening;\r\n\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                if (listeningTo[i].obj == obj) {\r\n                    listening = listeningTo[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (!listening) {\r\n                listeningTo.push(\r\n                    listening = {\r\n                        obj: obj,\r\n                        events: {}\r\n                    }\r\n                );\r\n            }\r\n            var listeningEvents = listening.events,\r\n                listeningEvent = listeningEvents[event] = listeningEvents[event] || [];\r\n            if (listeningEvent.indexOf(callback) == -1) {\r\n                listeningEvent.push(callback);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        listenToOnce: function(obj, event, callback) {\r\n            return this.listenTo(obj, event, callback, 1);\r\n        },\r\n\r\n        unlistenTo: function(obj, event, callback) {\r\n            var listeningTo = this._listeningTo;\r\n            if (!listeningTo) {\r\n                return this;\r\n            }\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                var listening = listeningTo[i];\r\n\r\n                if (obj && obj != listening.obj) {\r\n                    continue;\r\n                }\r\n\r\n                var listeningEvents = listening.events;\r\n                for (var eventName in listeningEvents) {\r\n                    if (event && event != eventName) {\r\n                        continue;\r\n                    }\r\n\r\n                    var listeningEvent = listeningEvents[eventName];\r\n\r\n                    for (var j = 0; j < listeningEvent.length; j++) {\r\n                        if (!callback || callback == listeningEvent[i]) {\r\n                            listening.obj.off(eventName, listeningEvent[i], this);\r\n                            listeningEvent[i] = null;\r\n                        }\r\n                    }\r\n\r\n                    listeningEvent = listeningEvents[eventName] = compact(listeningEvent);\r\n\r\n                    if (isEmptyObject(listeningEvent)) {\r\n                        listeningEvents[eventName] = null;\r\n                    }\r\n\r\n                }\r\n\r\n                if (isEmptyObject(listeningEvents)) {\r\n                    listeningTo[i] = null;\r\n                }\r\n            }\r\n\r\n            listeningTo = this._listeningTo = compact(listeningTo);\r\n            if (isEmptyObject(listeningTo)) {\r\n                this._listeningTo = null;\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n    return events.Handler = Handler;\r\n\r\n})"]}